# -*- coding: utf-8 -*-
"""Onlinefood_rithuvarna.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14Dsk2B4OGaqiRRvRlk_Zjg4-XDNXV4x5
"""

aaimport numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv('/content/onlinefoods.csv')
df

df.head()

df.tail()

df.dtypes

df.isna().sum()

df['Marital Status']=df['Marital Status'].fillna(df['Marital Status'].mode()[0])
df['Occupation']=df['Occupation'].fillna(df['Occupation'].mode()[0])
df['Family size']=df['Family size'].fillna(df['Family size'].mean())
df['Feedback']=df['Feedback'].fillna(df['Feedback'].mode()[0])
df.isna().sum()

df['Feedback'].value_counts()

df.drop(['Unnamed: 12'],axis=1,inplace=True)
df.drop(['Educational Qualifications'],axis=1,inplace=True)
df

df.dtypes

from sklearn.preprocessing import LabelEncoder
lb=LabelEncoder()
df['Gender']=lb.fit_transform(df['Gender'])
df['Occupation']=lb.fit_transform(df['Occupation'])
df['Marital Status']=lb.fit_transform(df['Marital Status'])
df['Monthly Income']=lb.fit_transform(df['Monthly Income'])
df['Feedback']=lb.fit_transform(df['Feedback'])
df

df.dtypes

x=df.drop(['Output'],axis=1).values
x

y=df['Output'].values
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=42)

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
scaler.fit(x_train)
x_train=scaler.transform(x_train)
x_test=scaler.transform(x_test)

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=7)
knn.fit(x_train,y_train)
y_pred=knn.predict(x_test)
y_pred

y_test

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)
cm

from sklearn.metrics import accuracy_score
score=accuracy_score(y_test,y_pred)
score

from sklearn.metrics import ConfusionMatrixDisplay
labels=['No','Yes']
cmd=ConfusionMatrixDisplay(cm,display_labels=labels)
cmd.plot()

sns.countplot(x='Output',data=df,color='g')

sns.countplot(x='Feedback',data=df,color='g')

sns.countplot(x='Feedback',data=df,hue='Output')